# CMakeLists.txt for File Processor Example
# Generated by CPP-Scaffold - Modern C++ Project Scaffolding Tool

cmake_minimum_required(VERSION 3.14)

# Project configuration
project(file-processor
    VERSION 1.0.0
    DESCRIPTION "A comprehensive file processing utility demonstrating modern C++ practices"
    LANGUAGES CXX
)

# C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Build type
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif()

# Compiler-specific options
if(MSVC)
    add_compile_options(/W4 /WX)
    add_compile_definitions(_CRT_SECURE_NO_WARNINGS)
else()
    add_compile_options(-Wall -Wextra -Wpedantic -Werror)
endif()

# Find packages
find_package(Threads REQUIRED)

# vcpkg integration
if(DEFINED ENV{VCPKG_ROOT} AND NOT DEFINED CMAKE_TOOLCHAIN_FILE)
    set(CMAKE_TOOLCHAIN_FILE "$ENV{VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake"
        CACHE STRING "")
endif()

# Optional dependencies (would be managed by vcpkg in real project)
find_package(fmt QUIET)
find_package(spdlog QUIET)
find_package(nlohmann_json QUIET)

# Include directories
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)

# Source files
set(CORE_SOURCES
    src/core/file_processor.cpp
    src/core/file_analyzer.cpp
    src/core/text_processor.cpp
)

set(CLI_SOURCES
    src/cli/argument_parser.cpp
)

set(UTILS_SOURCES
    src/utils/logger.cpp
    src/utils/file_utils.cpp
)

set(ALL_SOURCES
    ${CORE_SOURCES}
    ${CLI_SOURCES}
    ${UTILS_SOURCES}
)

# Create static libraries for better organization
add_library(file_processor_core STATIC ${CORE_SOURCES})
add_library(file_processor_cli STATIC ${CLI_SOURCES})
add_library(file_processor_utils STATIC ${UTILS_SOURCES})

# Set target properties
set_target_properties(file_processor_core file_processor_cli file_processor_utils
    PROPERTIES
    CXX_STANDARD 17
    CXX_STANDARD_REQUIRED ON
    CXX_EXTENSIONS OFF
)

# Link libraries
target_link_libraries(file_processor_core
    PUBLIC
        Threads::Threads
        file_processor_utils
)

target_link_libraries(file_processor_cli
    PUBLIC
        file_processor_utils
)

# Link optional dependencies
if(fmt_FOUND)
    target_link_libraries(file_processor_utils PUBLIC fmt::fmt)
    target_compile_definitions(file_processor_utils PUBLIC HAS_FMT)
endif()

if(spdlog_FOUND)
    target_link_libraries(file_processor_utils PUBLIC spdlog::spdlog)
    target_compile_definitions(file_processor_utils PUBLIC HAS_SPDLOG)
endif()

if(nlohmann_json_FOUND)
    target_link_libraries(file_processor_core PUBLIC nlohmann_json::nlohmann_json)
    target_compile_definitions(file_processor_core PUBLIC HAS_JSON)
endif()

# Main executable
add_executable(file-processor src/main.cpp)

target_link_libraries(file-processor
    PRIVATE
        file_processor_core
        file_processor_cli
        file_processor_utils
)

# Set executable properties
set_target_properties(file-processor
    PROPERTIES
    OUTPUT_NAME "file-processor"
    CXX_STANDARD 17
    CXX_STANDARD_REQUIRED ON
)

# Version header generation
configure_file(
    "${CMAKE_CURRENT_SOURCE_DIR}/include/file-processor/version.h.in"
    "${CMAKE_CURRENT_SOURCE_DIR}/include/file-processor/version.h"
    @ONLY
)

# Installation
install(TARGETS file-processor
    RUNTIME DESTINATION bin
)

install(FILES
    README.md
    LICENSE
    DESTINATION share/doc/file-processor
)

# Testing
option(BUILD_TESTING "Build tests" ON)

if(BUILD_TESTING)
    enable_testing()
    
    # Find Google Test
    find_package(GTest QUIET)
    
    if(GTest_FOUND)
        # Test executable
        add_executable(test_file_processor
            tests/test_file_processor.cpp
            tests/test_file_analyzer.cpp
            tests/test_text_processor.cpp
            tests/test_logger.cpp
            tests/test_main.cpp
        )
        
        target_link_libraries(test_file_processor
            PRIVATE
                file_processor_core
                file_processor_cli
                file_processor_utils
                GTest::gtest
                GTest::gtest_main
                Threads::Threads
        )
        
        # Add tests
        add_test(NAME FileProcessorTests COMMAND test_file_processor)
        
        # Individual test targets for better organization
        add_test(NAME CoreTests COMMAND test_file_processor --gtest_filter="FileProcessorTest.*")
        add_test(NAME UtilsTests COMMAND test_file_processor --gtest_filter="LoggerTest.*")
        add_test(NAME IntegrationTests COMMAND test_file_processor --gtest_filter="*Integration*")
        
        # Performance tests (optional)
        add_test(NAME PerformanceTests COMMAND test_file_processor --gtest_filter="*Performance*")
        set_tests_properties(PerformanceTests PROPERTIES TIMEOUT 30)
        
    else()
        message(WARNING "Google Test not found. Tests will not be built.")
    endif()
endif()

# Documentation
option(BUILD_DOCS "Build documentation" OFF)

if(BUILD_DOCS)
    find_package(Doxygen QUIET)
    
    if(Doxygen_FOUND)
        set(DOXYGEN_IN ${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile.in)
        set(DOXYGEN_OUT ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile)
        
        configure_file(${DOXYGEN_IN} ${DOXYGEN_OUT} @ONLY)
        
        add_custom_target(docs ALL
            COMMAND ${DOXYGEN_EXECUTABLE} ${DOXYGEN_OUT}
            WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
            COMMENT "Generating API documentation with Doxygen"
            VERBATIM
        )
        
        install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/docs/html/
            DESTINATION share/doc/file-processor/api
        )
    else()
        message(WARNING "Doxygen not found. Documentation will not be built.")
    endif()
endif()

# Code coverage (Debug builds only)
if(CMAKE_BUILD_TYPE STREQUAL "Debug" AND CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
    option(ENABLE_COVERAGE "Enable code coverage" OFF)
    
    if(ENABLE_COVERAGE)
        target_compile_options(file_processor_core PRIVATE --coverage)
        target_compile_options(file_processor_cli PRIVATE --coverage)
        target_compile_options(file_processor_utils PRIVATE --coverage)
        target_link_libraries(file_processor_core PRIVATE --coverage)
        target_link_libraries(file_processor_cli PRIVATE --coverage)
        target_link_libraries(file_processor_utils PRIVATE --coverage)
        
        # Coverage target
        add_custom_target(coverage
            COMMAND lcov --capture --directory . --output-file coverage.info
            COMMAND lcov --remove coverage.info '/usr/*' --output-file coverage.info
            COMMAND lcov --list coverage.info
            COMMAND genhtml coverage.info --output-directory coverage_html
            WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
            COMMENT "Generating code coverage report"
        )
    endif()
endif()

# Static analysis
option(ENABLE_STATIC_ANALYSIS "Enable static analysis" OFF)

if(ENABLE_STATIC_ANALYSIS)
    find_program(CLANG_TIDY_EXE NAMES "clang-tidy")
    
    if(CLANG_TIDY_EXE)
        set_target_properties(file_processor_core file_processor_cli file_processor_utils
            PROPERTIES
            CXX_CLANG_TIDY "${CLANG_TIDY_EXE};-checks=-*,readability-*,performance-*,modernize-*"
        )
    endif()
    
    find_program(CPPCHECK_EXE NAMES "cppcheck")
    
    if(CPPCHECK_EXE)
        add_custom_target(cppcheck
            COMMAND ${CPPCHECK_EXE} --enable=all --std=c++17 --project=${CMAKE_BINARY_DIR}/compile_commands.json
            COMMENT "Running cppcheck static analysis"
        )
    endif()
endif()

# Export compile commands for IDEs
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Package configuration
set(CPACK_PACKAGE_NAME "file-processor")
set(CPACK_PACKAGE_VERSION "${PROJECT_VERSION}")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "${PROJECT_DESCRIPTION}")
set(CPACK_PACKAGE_VENDOR "CPP-Scaffold")
set(CPACK_PACKAGE_CONTACT "developer@example.com")

# Platform-specific packaging
if(WIN32)
    set(CPACK_GENERATOR "NSIS;ZIP")
    set(CPACK_NSIS_DISPLAY_NAME "File Processor")
    set(CPACK_NSIS_PACKAGE_NAME "File Processor")
elseif(APPLE)
    set(CPACK_GENERATOR "DragNDrop;TGZ")
else()
    set(CPACK_GENERATOR "DEB;RPM;TGZ")
    set(CPACK_DEBIAN_PACKAGE_MAINTAINER "CPP-Scaffold <developer@example.com>")
    set(CPACK_RPM_PACKAGE_LICENSE "MIT")
endif()

include(CPack)

# Print configuration summary
message(STATUS "")
message(STATUS "File Processor Configuration Summary:")
message(STATUS "  Version: ${PROJECT_VERSION}")
message(STATUS "  Build type: ${CMAKE_BUILD_TYPE}")
message(STATUS "  C++ standard: ${CMAKE_CXX_STANDARD}")
message(STATUS "  Install prefix: ${CMAKE_INSTALL_PREFIX}")
message(STATUS "  Build testing: ${BUILD_TESTING}")
message(STATUS "  Build docs: ${BUILD_DOCS}")
if(ENABLE_COVERAGE)
    message(STATUS "  Code coverage: ON")
endif()
if(ENABLE_STATIC_ANALYSIS)
    message(STATUS "  Static analysis: ON")
endif()
message(STATUS "")
